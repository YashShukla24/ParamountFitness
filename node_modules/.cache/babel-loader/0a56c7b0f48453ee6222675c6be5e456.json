{"ast":null,"code":"import _classCallCheck from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\yash\\\\LearnReact\\\\src\\\\components\\\\UploadExcel.jsx\";\nimport React, { Component } from \"react\";\nimport { ExcelRenderer, OutTable } from \"react-excel-renderer\";\nimport { Jumbotron, Col, Input, InputGroup, InputGroupAddon, FormGroup, Label, Button, Fade, FormFeedback, Container, Card } from \"reactstrap\";\n\nvar UploadExcel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UploadExcel, _Component);\n\n  function UploadExcel(props) {\n    var _this;\n\n    _classCallCheck(this, UploadExcel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UploadExcel).call(this, props));\n\n    _this.renderFile = function (fileObj) {\n      //just pass the fileObj as parameter\n      ExcelRenderer(fileObj, function (err, resp) {\n        if (err) {\n          console.log(err);\n        } else {\n          _this.setState({\n            dataLoaded: true,\n            cols: resp.cols,\n            rows: resp.rows\n          });\n        }\n      });\n    };\n\n    _this.fileHandler = function (event) {\n      if (event.target.files.length) {\n        var fileObj = event.target.files[0];\n        var fileName = fileObj.name; //check for file extension and pass only if it is .xlsx and display error message otherwise\n\n        if (fileName.slice(fileName.lastIndexOf(\".\") + 1) === \"xlsx\") {\n          _this.setState({\n            uploadedFileName: fileName,\n            isFormInvalid: false\n          });\n\n          _this.renderFile(fileObj);\n        } else {\n          _this.setState({\n            isFormInvalid: true,\n            uploadedFileName: \"\"\n          });\n        }\n      }\n    };\n\n    _this.openFileBrowser = function () {\n      _this.fileInput.current.click();\n    };\n\n    _this.openNewPage = function (chosenItem) {\n      var url = chosenItem === \"github\" ? \"FirstUrl\" : \"SecondUrl\";\n      window.open(url, \"_blank\");\n    };\n\n    _this.state = {\n      isOpen: false,\n      dataLoaded: false,\n      isFormInvalid: false,\n      rows: null,\n      cols: null\n    };\n    _this.fileHandler = _this.fileHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.openFileBrowser = _this.openFileBrowser.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderFile = _this.renderFile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.openNewPage = _this.openNewPage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fileInput = React.createRef();\n    return _this;\n  }\n\n  _createClass(UploadExcel, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        className: \"jumbotron-background\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Welcome to the Upload excel.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Developed with \", React.createElement(\"span\", {\n        className: \"fa fa-heart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), \" CST\"), React.createElement(\"hr\", {\n        className: \"my-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }))), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleFile\",\n        xs: 6,\n        sm: 4,\n        lg: 2,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Upload\"), React.createElement(Col, {\n        xs: 4,\n        sm: 8,\n        lg: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(InputGroupAddon, {\n        addonType: \"prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"info\",\n        style: {\n          color: \"white\",\n          zIndex: 0\n        },\n        onClick: this.openFileBrowser.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"cui-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), \" Browse\\u2026\"), React.createElement(\"input\", {\n        type: \"file\",\n        hidden: true,\n        onChange: this.fileHandler.bind(this),\n        ref: this.fileInput,\n        onClick: function onClick(event) {\n          event.target.value = null;\n        },\n        style: {\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })), React.createElement(Input, {\n        type: \"text\",\n        className: \"form-control\",\n        value: this.state.uploadedFileName,\n        readOnly: true,\n        invalid: this.state.isFormInvalid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(FormFeedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Fade, {\n        in: this.state.isFormInvalid,\n        tag: \"h6\",\n        style: {\n          fontStyle: \"italic\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Please select a .xlsx file only !\")))))), this.state.dataLoaded && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Card, {\n        body: true,\n        outline: true,\n        color: \"secondary\",\n        className: \"restrict-card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(OutTable, {\n        data: this.state.rows,\n        columns: this.state.cols,\n        tableClassName: \"ExcelTable2007\",\n        tableHeaderRowClass: \"heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return UploadExcel;\n}(Component);\n\nexport default UploadExcel;","map":{"version":3,"sources":["D:\\yash\\LearnReact\\src\\components\\UploadExcel.jsx"],"names":["React","Component","ExcelRenderer","OutTable","Jumbotron","Col","Input","InputGroup","InputGroupAddon","FormGroup","Label","Button","Fade","FormFeedback","Container","Card","UploadExcel","props","renderFile","fileObj","err","resp","console","log","setState","dataLoaded","cols","rows","fileHandler","event","target","files","length","fileName","name","slice","lastIndexOf","uploadedFileName","isFormInvalid","openFileBrowser","fileInput","current","click","openNewPage","chosenItem","url","window","open","state","isOpen","bind","toggle","createRef","color","zIndex","value","padding","fontStyle"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { ExcelRenderer, OutTable } from \"react-excel-renderer\";\r\nimport {\r\n  Jumbotron,\r\n  Col,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  FormGroup,\r\n  Label,\r\n  Button,\r\n  Fade,\r\n  FormFeedback,\r\n  Container,\r\n  Card\r\n} from \"reactstrap\";\r\nclass UploadExcel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false,\r\n      dataLoaded: false,\r\n      isFormInvalid: false,\r\n      rows: null,\r\n      cols: null\r\n    };\r\n    this.fileHandler = this.fileHandler.bind(this);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.openFileBrowser = this.openFileBrowser.bind(this);\r\n    this.renderFile = this.renderFile.bind(this);\r\n    this.openNewPage = this.openNewPage.bind(this);\r\n    this.fileInput = React.createRef();\r\n  }\r\n  renderFile = fileObj => {\r\n    //just pass the fileObj as parameter\r\n    ExcelRenderer(fileObj, (err, resp) => {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        this.setState({\r\n          dataLoaded: true,\r\n          cols: resp.cols,\r\n          rows: resp.rows\r\n        });\r\n      }\r\n    });\r\n  };\r\n  fileHandler = event => {\r\n    if (event.target.files.length) {\r\n      let fileObj = event.target.files[0];\r\n      let fileName = fileObj.name;\r\n\r\n      //check for file extension and pass only if it is .xlsx and display error message otherwise\r\n      if (fileName.slice(fileName.lastIndexOf(\".\") + 1) === \"xlsx\") {\r\n        this.setState({\r\n          uploadedFileName: fileName,\r\n          isFormInvalid: false\r\n        });\r\n        this.renderFile(fileObj);\r\n      } else {\r\n        this.setState({\r\n          isFormInvalid: true,\r\n          uploadedFileName: \"\"\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  openFileBrowser = () => {\r\n    this.fileInput.current.click();\r\n  };\r\n  openNewPage = chosenItem => {\r\n    const url = chosenItem === \"github\" ? \"FirstUrl\" : \"SecondUrl\";\r\n    window.open(url, \"_blank\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <Jumbotron className=\"jumbotron-background\">\r\n            {/* <h1 className=\"display-3\">react-excel-renderer</h1> */}\r\n            <p className=\"lead\">Welcome to the Upload excel.</p>\r\n            <p>\r\n              Developed with <span className=\"fa fa-heart\" /> CST\r\n            </p>\r\n            {/* <Button\r\n              className=\"primary jumbotron-button\"\r\n              onClick={this.openNewPage.bind(this, \"github\")}\r\n            >\r\n              GitHub\r\n            </Button>{\" \"}\r\n            <Button\r\n              className=\"primary jumbotron-button\"\r\n              onClick={this.openNewPage.bind(this, \"medium\")}\r\n            >\r\n              Medium\r\n            </Button> */}\r\n            <hr className=\"my-2\" />\r\n          </Jumbotron>\r\n        </div>\r\n        <Container>\r\n          <form>\r\n            <FormGroup row>\r\n              <Label for=\"exampleFile\" xs={6} sm={4} lg={2} size=\"lg\">\r\n                Upload\r\n              </Label>\r\n              <Col xs={4} sm={8} lg={10}>\r\n                <InputGroup>\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <Button\r\n                      color=\"info\"\r\n                      style={{ color: \"white\", zIndex: 0 }}\r\n                      onClick={this.openFileBrowser.bind(this)}\r\n                    >\r\n                      <i className=\"cui-file\" /> Browse&hellip;\r\n                    </Button>\r\n                    <input\r\n                      type=\"file\"\r\n                      hidden\r\n                      onChange={this.fileHandler.bind(this)}\r\n                      ref={this.fileInput}\r\n                      onClick={event => {\r\n                        event.target.value = null;\r\n                      }}\r\n                      style={{ padding: \"10px\" }}\r\n                    />\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={this.state.uploadedFileName}\r\n                    readOnly\r\n                    invalid={this.state.isFormInvalid}\r\n                  />\r\n                  <FormFeedback>\r\n                    <Fade\r\n                      in={this.state.isFormInvalid}\r\n                      tag=\"h6\"\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    >\r\n                      Please select a .xlsx file only !\r\n                    </Fade>\r\n                  </FormFeedback>\r\n                </InputGroup>\r\n              </Col>\r\n            </FormGroup>\r\n          </form>\r\n\r\n          {this.state.dataLoaded && (\r\n            <div>\r\n              <Card body outline color=\"secondary\" className=\"restrict-card\">\r\n                <OutTable\r\n                  data={this.state.rows}\r\n                  columns={this.state.cols}\r\n                  tableClassName=\"ExcelTable2007\"\r\n                  tableHeaderRowClass=\"heading\"\r\n                />\r\n              </Card>\r\n            </div>\r\n          )}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadExcel;\r\n"]},"metadata":{},"sourceType":"module"}