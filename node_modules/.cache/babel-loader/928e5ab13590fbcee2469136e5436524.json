{"ast":null,"code":"import _classCallCheck from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\yash\\\\LearnReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\yash\\\\LearnReact\\\\src\\\\components\\\\OutTable.jsx\";\nimport React, { Component } from \"react\";\nimport XLSX from \"xlsx\";\nexport var OutTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OutTable, _Component);\n\n  function OutTable(props) {\n    var _this;\n\n    _classCallCheck(this, OutTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OutTable).call(this, props));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(OutTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        className: this.props.tableClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, this.props.columns.map(function (c) {\n        return React.createElement(\"th\", {\n          key: c.key,\n          className: c.key === -1 ? _this2.props.tableHeaderRowClass : \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }, c.key === -1 ? \"\" : c.name);\n      })), this.props.data.map(function (r, i) {\n        return React.createElement(\"tr\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          key: i,\n          className: _this2.props.tableHeaderRowClass,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, i), _this2.props.columns.map(function (c) {\n          return React.createElement(\"td\", {\n            key: c.key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          }, r[c.key]);\n        }));\n      }))));\n    }\n  }]);\n\n  return OutTable;\n}(Component);\nexport function ExcelRenderer(file, callback) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    var rABS = !!reader.readAsBinaryString;\n\n    reader.onload = function (e) {\n      /* Parse data */\n      var bstr = e.target.result;\n      var wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\"\n      });\n      /* Get first worksheet */\n\n      var wsname = wb.SheetNames[0];\n      var ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      var json = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      var cols = make_cols(ws[\"!ref\"]);\n      var data = {\n        rows: json,\n        cols: cols\n      };\n      resolve(data);\n      return callback(null, data);\n    };\n\n    if (file && rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  });\n}\n\nfunction make_cols(refstr) {\n  var o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) {\n    o[i] = {\n      name: XLSX.utils.encode_col(i),\n      key: i\n    };\n  }\n\n  return o;\n}","map":{"version":3,"sources":["D:\\yash\\LearnReact\\src\\components\\OutTable.jsx"],"names":["React","Component","XLSX","OutTable","props","state","tableClassName","columns","map","c","key","tableHeaderRowClass","name","data","r","i","ExcelRenderer","file","callback","Promise","resolve","reject","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","json","utils","sheet_to_json","header","cols","make_cols","rows","readAsArrayBuffer","refstr","o","C","decode_range","encode_col"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport XLSX from \"xlsx\";\r\n\r\nexport class OutTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table className={this.props.tableClassName}>\r\n          <tbody>\r\n            <tr>\r\n              {this.props.columns.map(c => (\r\n                <th\r\n                  key={c.key}\r\n                  className={c.key === -1 ? this.props.tableHeaderRowClass : \"\"}\r\n                >\r\n                  {c.key === -1 ? \"\" : c.name}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n            {this.props.data.map((r, i) => (\r\n              <tr key={i}>\r\n                <td key={i} className={this.props.tableHeaderRowClass}>\r\n                  {i}\r\n                </td>\r\n                {this.props.columns.map(c => (\r\n                  <td key={c.key}>{r[c.key]}</td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport function ExcelRenderer(file, callback) {\r\n  return new Promise(function(resolve, reject) {\r\n    var reader = new FileReader();\r\n    var rABS = !!reader.readAsBinaryString;\r\n    reader.onload = function(e) {\r\n      /* Parse data */\r\n      var bstr = e.target.result;\r\n      var wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\r\n\r\n      /* Get first worksheet */\r\n      var wsname = wb.SheetNames[0];\r\n      var ws = wb.Sheets[wsname];\r\n\r\n      /* Convert array of arrays */\r\n      var json = XLSX.utils.sheet_to_json(ws, { header: 1 });\r\n      var cols = make_cols(ws[\"!ref\"]);\r\n\r\n      var data = { rows: json, cols: cols };\r\n\r\n      resolve(data);\r\n      return callback(null, data);\r\n    };\r\n    if (file && rABS) reader.readAsBinaryString(file);\r\n    else reader.readAsArrayBuffer(file);\r\n  });\r\n}\r\n\r\nfunction make_cols(refstr) {\r\n  var o = [],\r\n    C = XLSX.utils.decode_range(refstr).e.c + 1;\r\n  for (var i = 0; i < C; ++i) {\r\n    o[i] = { name: XLSX.utils.encode_col(i), key: i };\r\n  }\r\n  return o;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}